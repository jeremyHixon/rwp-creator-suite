# Content Repurposing Engine - Claude Code Context

## FIRST STEP: Analyze Existing Codebase
Before implementing anything, examine the current codebase to understand:

1. **Current AI Implementation**: `src/modules/caption-writer/class-ai-caption-service.php`
2. **Existing module patterns**: How modules are structured and loaded
3. **Block development workflow**: Current block registration and build process
4. **Settings management**: How options are stored and accessed
5. **Client-side patterns**: localStorage usage, state management, API calls
6. **Asset management**: How JavaScript/CSS is enqueued and organized

Provide a concise summary of current architecture before proposing changes.

## Project Overview
Adding a content repurposing tool to an existing WordPress plugin. The tool transforms long-form content into platform-specific social media posts using OpenAI's API.

## Known Infrastructure
1. **AI Service**: `src/modules/caption-writer/class-ai-caption-service.php` (needs to become plugin-wide)
2. **Settings**: Global options page approach (one page, multiple features)
3. **Build System**: Uses `@wordpress/scripts` with custom endpoints
4. **Privacy-first**: All content processing client-side, no server storage

## Required Refactoring
Based on existing AI service at `src/modules/caption-writer/class-ai-caption-service.php`:
1. **Generalize AI Service**: Make it plugin-wide rather than caption-writer specific
2. **Settings**: Integrate with existing options structure 
3. **Usage Tracking**: Extend current patterns to support multiple AI features

## New Implementation Required

### 1. Content Repurposer Module
Structure to be determined after analyzing existing module patterns.

### 2. WordPress Block
Follow discovered block-as-container pattern.

### 3. Platform Support (Start Basic)
- **Twitter**: 280 character limit
- **LinkedIn**: 3000 character limit, professional tone
- **Facebook**: 63,206 character limit, engaging tone  
- **Instagram**: 2200 character limit, visual-focused

Character limit monitoring as primary constraint (like existing implementation).

## Technical Requirements

### Content Processing (Client-Side Only)
- Input: Long-form content 
- Analysis: Extract key points, maintain tone
- Generation: Platform-specific versions with character limits
- Output: Formatted text ready for copy/paste

### Privacy Requirements  
- No content sent to plugin servers (follow existing patterns)
- All processing client-side
- OpenAI API calls direct from browser
- Only anonymized metrics (follow existing usage tracking)

## Development Guidelines
- Follow patterns discovered in codebase analysis
- Use existing WordPress coding standards
- Maintain current security and state management patterns
- Integrate with discovered settings structure

## Implementation Steps
1. **Analyze & Document**: Current architecture and patterns
2. **Refactor**: AI service to be plugin-wide  
3. **Implement**: Content repurposer following discovered patterns
4. **Integrate**: With existing settings and tracking
5. **Test**: Within current infrastructure