# WordPress Plugin Version Update Context

## Task Overview
Increment plugin version by +0.1 and update all relevant files with new version and changelog.

## Files to Update

### 1. Main Plugin File
**File:** `{plugin-name}.php` (or main plugin file)
**Updates:**
- Header comment: `Version: X.X.X`
- Constant (if exists): `define('PLUGIN_VERSION', 'X.X.X');`

### 2. README.txt (WordPress.org format)
**File:** `README.txt`
**Updates:**
- `Stable tag: X.X.X`
- Add new version section in changelog
- Update "Tested up to" if needed

### 3. package.json
**File:** `package.json`
**Updates:**
- `"version": "X.X.X"`

### 4. README.md (if exists)
**File:** `README.md`
**Updates:**
- Version badges/references
- Changelog section with new features

## Version Increment Process

1. **Identify current version** from main plugin file header
2. **Calculate new version** (current + 0.1)
3. **Update version strings** in all files
4. **Document changes** in changelog sections

## Changelog Entry Format

For README.txt:
```
= X.X.X =
* New: [Feature description]
* Improved: [Enhancement description]  
* Fixed: [Bug fix description]
* Updated: [Update description]
```

For README.md:
```markdown
## X.X.X
- **New:** [Feature description]
- **Improved:** [Enhancement description]
- **Fixed:** [Bug fix description]
- **Updated:** [Update description]
```

## Instructions for Claude

1. **Scan files** to identify current version
2. **Increment version** by 0.1 (e.g., 1.2.3 â†’ 1.2.4)
3. **Update all version references** in the files listed above
4. **Generate changelog entries** based on recent code changes/commits
5. **Maintain consistent formatting** across all files
6. **Preserve existing changelog history**

## Notes
- Use semantic versioning (MAJOR.MINOR.PATCH)
- Increment PATCH version (+0.1) for bug fixes and minor updates
- Review git commits since last version for changelog content
- Ensure WordPress compatibility version is current