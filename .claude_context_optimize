# WordPress Code Analysis Context

You are analyzing a WordPress codebase for compliance with established coding standards, architectural patterns, and optimization opportunities. **Do not remove or suggest removing any functionality** - only identify issues and suggest improvements that maintain all existing features.

## Analysis Scope

Perform comprehensive analysis across these areas:

### 1. WordPress Coding Standards Compliance
- **Naming conventions**: Files, classes, functions, variables
- **PHP structure**: Spacing, braces, operators
- **Security**: Input sanitization, output escaping, nonces, capabilities
- **Database**: Prepared statements, proper $wpdb usage
- **Hooks**: Action/filter naming and usage
- **Internationalization**: Text domains, translation functions

### 2. Block Development Standards
- **File structure**: block.json, src organization
- **WordPress Scripts**: Proper @wordpress/scripts usage
- **Component patterns**: Edit/save component structure
- **WordPress imports**: Correct @wordpress/* package usage
- **Attribute handling**: Type safety, default values
- **Inner blocks**: Proper template and allowed block usage

### 3. Architecture Compliance
- **Modular organization**: Feature-based module structure
- **Service containers**: Dependency injection patterns
- **Client-side heavy**: Minimal PHP rendering, API-first approach
- **Cache optimization**: Guest user caching strategies
- **Performance**: Static content generation, minimal database queries

### 4. State Management Patterns
- **localStorage priority**: Primary storage for temporary state
- **Database usage**: Only for logged-in user preferences
- **State persistence**: Auto-save, graceful transitions
- **Guest to user transitions**: Seamless state merging
- **Memory management**: Cleanup and optimization

### 5. API Design Standards
- **WordPress REST API**: Proper endpoint registration
- **Response formats**: Consistent success/error structures
- **Permission callbacks**: Appropriate security checks
- **Cache headers**: Guest-friendly caching
- **Error handling**: User-friendly messages, proper logging

### 6. Style Isolation & Theming
- **Block isolation**: Style containment within block boundaries
- **Tailwind/DaisyUI scoping**: Prefixed classes, minimal design
- **Light theme consistency**: Single theme approach
- **Container queries**: Block-based responsive design
- **Editor/frontend parity**: Consistent styling across contexts

### 7. Build & Deployment Standards
- **Module-based assets**: Organized entry points
- **Environment detection**: Development/staging/production configs
- **Asset optimization**: Proper versioning, cache busting
- **Migration system**: Database schema evolution
- **Health monitoring**: System status checks

## Analysis Output Format

For each file analyzed, provide:

### Issues Found
List specific violations with:
- **File**: Path and line number
- **Category**: Which standard/pattern is violated
- **Severity**: Critical, High, Medium, Low
- **Issue**: Clear description of the problem
- **Impact**: How this affects functionality/performance/security

### Optimization Opportunities
Identify improvements for:
- **Performance**: Caching, query optimization, asset loading
- **Security**: Enhanced sanitization, permission checks
- **Maintainability**: Code organization, documentation
- **User Experience**: State persistence, error handling
- **Standards Compliance**: Better WordPress patterns

### Recommendations
For each issue, provide:
- **Specific Fix**: Exact code changes needed
- **Why**: Explanation of the improvement
- **Priority**: Implementation urgency
- **Dependencies**: What else might need to change

## Key Standards Checklist

### PHP Code Quality
- [ ] All functions/classes prefixed with `plugin_name_`
- [ ] Input sanitized with appropriate `sanitize_*` functions
- [ ] Output escaped with appropriate `esc_*` functions
- [ ] Nonces used for forms and AJAX
- [ ] Capability checks before privileged operations
- [ ] Prepared statements for database queries
- [ ] Text domain consistent throughout
- [ ] File headers properly formatted

### JavaScript/Block Standards
- [ ] Uses @wordpress/scripts exclusively
- [ ] No custom webpack configurations unless necessary
- [ ] WordPress components used instead of external libraries
- [ ] No localStorage/sessionStorage in block editor contexts
- [ ] Proper imports from @wordpress packages
- [ ] State stored in attributes only for blocks
- [ ] No direct DOM manipulation in blocks

### Architecture Standards
- [ ] Feature-based module organization
- [ ] Service container for dependency management
- [ ] API-first approach with minimal PHP rendering
- [ ] Guest user optimization with aggressive caching
- [ ] Client-side state management with localStorage priority
- [ ] Database used only for logged-in user preferences

### Security Standards
- [ ] All user input sanitized
- [ ] All output escaped
- [ ] Nonce verification on state-changing operations
- [ ] Capability checks before sensitive actions
- [ ] SQL injection prevention with prepared statements
- [ ] XSS prevention with proper escaping

### Performance Standards
- [ ] Conditional asset loading (admin/frontend separation)
- [ ] File modification time for cache busting in development
- [ ] Static content generation for cacheable data
- [ ] Optimized database queries with proper caching
- [ ] Lazy loading for non-critical modules

## Conflict Detection

Flag these potential issues:

### WordPress Standards Conflicts
- Custom webpack configs that bypass @wordpress/scripts
- External UI libraries instead of WordPress components
- Browser storage usage in block editor contexts
- Direct DOM manipulation instead of React patterns

### Architecture Pattern Conflicts
- Heavy PHP rendering instead of API-first approach
- Options table usage instead of user meta for preferences
- Synchronous operations instead of async patterns
- Monolithic organization instead of modular structure

### Style Isolation Conflicts
- Global CSS that affects theme elements
- Unscoped utility classes (missing blk- or dui- prefixes)
- Base styles that interfere with theme
- Missing isolation containers for blocks

## Analysis Instructions

1. **Scan all PHP files** for coding standards compliance
2. **Review JavaScript/React files** for WordPress block standards
3. **Check asset organization** against modular architecture patterns
4. **Verify API endpoints** follow REST conventions and security practices
5. **Analyze state management** for localStorage priority and proper transitions
6. **Review CSS/SCSS** for proper isolation and minimalistic design
7. **Check build configuration** for standards compliance
8. **Identify security vulnerabilities** in input/output handling
9. **Assess performance implications** of current patterns
10. **Suggest optimizations** that maintain all existing functionality

## Critical Reminders

- **Preserve all functionality** - Never suggest removing features
- **Security first** - Flag all potential vulnerabilities
- **Performance matters** - Identify optimization opportunities
- **Standards compliance** - Ensure WordPress best practices
- **Maintainability** - Suggest cleaner, more modular approaches
- **User experience** - Improve state persistence and error handling
- **Minimalistic design** - Prefer simple, clean aesthetics in blocks

## Example Analysis Output

```
File: includes/class-plugin-admin.php
Line: 45
Category: Security
Severity: High
Issue: User input not sanitized before database insertion
Impact: Potential SQL injection vulnerability
Fix: Use sanitize_text_field() before $wpdb->prepare()

File: assets/js/frontend.js  
Line: 23
Category: State Management
Severity: Medium
Issue: Using sessionStorage instead of localStorage priority
Impact: State not persisting across browser sessions
Fix: Replace sessionStorage with localStorage as primary storage

File: src/blocks/example/style.scss
Line: 12
Category: Style Isolation  
Severity: Medium
Issue: Unprefixed utility classes may conflict with theme
Impact: Styling inconsistencies across different themes
Fix: Add blk- prefix to all utility classes
```

Analyze the codebase comprehensively and provide actionable recommendations for improvement while preserving all existing functionality.